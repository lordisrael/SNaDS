openapi: 3.0.0
info:
  title: SNaDS API
  version: 1.0.0
  description: |
    The SNaDS API is a robust, secure, and scalable RESTful interface for managing users, preferences, events, and logs in modern applications. 

    **Key Features:**
    - **User Management:** Create, retrieve, and manage user profiles with essential attributes. Supports extensibility for future user data.
    - **Preferences:** Fine-grained control over notification settings (email, SMS, push), privacy options, and timezone configuration for each user.
    - **Event Tracking:** Log and retrieve user-related events with rich metadata, supporting reminders, activity tracking, and audit trails.
    - **Logging:** Access detailed logs for system events, errors, and user actions. Each log includes severity, message, metadata, and timestamps for monitoring and debugging.

    **Security:**
    - All endpoints require JWT bearer authentication, ensuring secure access and data protection.
    - Designed for compliance with modern security standards, suitable for both production and development environments.

    **Environment Support:**
    - **Production:** Optimized for reliability, scalability, and security. Comprehensive error handling and clear request/response schemas.
    - **Development:** Includes example payloads and responses for rapid prototyping, testing, and debugging.

    **Usage:**
    - **Base URL:** http://localhost:3000 (configurable for production)
    - **Authentication:** Pass a valid JWT token in the Authorization header.

    This documentation serves as a single source of truth for developers, DevOps, and QA teams, ensuring clarity and confidence in both production and development workflows.
servers:
  - url: http://localhost:3000
tags:
  - name: Users
  - name: Preferences
  - name: Events
  - name: Logs

paths:
  /api/users:
    get:
      tags: [Users]
      summary: Get all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags: [Users]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
            examples:
              simple:
                summary: Example create user
                value:
                  name: Joseph Israel
                  email: josephisraelmo2018@gmail.com
                  phone: +2348012345678
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/preferences/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Preferences]
      summary: Get preference by id
      responses:
        '200':
          description: Preference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags: [Preferences]
      summary: Update preference
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferenceUpdate'
            examples:
              updateExample:
                value:
                  user_id: 689de9e50c8d1f878bbbfe40
                  notifications:
                    email_enabled: true
                    sms_enabled: false
                    push_enabled: true
                  privacy:
                    profileVisibility: "friends"
                    dataSharing: false
                  timezone: "UTC"
      responses:
        '200':
          description: Updated preference
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
  /api/events:
    post:
      tags: [Events]
      summary: Create event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /api/events/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Events]
      summary: Get event by id
      responses:
        '200':
          description: Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/logs:
    get:
      tags: [Logs]
      summary: Get all logs
      responses:
        '200':
          description: List of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Log'
  /api/logs/{eventId}:
    parameters:
      - name: eventId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Logs]
      summary: Get log of an event
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
  /api/logs/{logId}:
    parameters:
      - name: logId
        in: path
        required: true
        schema:
          type: string
    get:
      tags: [Logs]
      summary: Get a particular log
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        msg:
          type: string
        stack:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
          example: 68a496dd5f8e74e60a2168e9
        name:
          type: string
          example: Joseph Israel
        email:
          type: string
          example: josephisraelmo2018@gmail.com
        phone:
          type: string
          example: +2348012345678
        createdAt:
          type: string
          format: date-time
    UserCreate:
      type: object
      required: [name, email]
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
    Preference:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        notifications:
          type: object
          properties:
            email_enabled:
              type: boolean
            sms_enabled:
              type: boolean
            push_enabled:
              type: boolean
        privacy:
          type: object
          properties:
            profileVisibility:
              type: string
            dataSharing:
              type: boolean
        timezone:
          type: string
    PreferenceUpdate:
      type: object
      properties:
        notifications:
          type: object
          properties:
            email_enabled:
              type: boolean
            sms_enabled:
              type: boolean
            push_enabled:
              type: boolean
        privacy:
          type: object
          properties:
            profileVisibility:
              type: string
            dataSharing:
              type: boolean
        timezone:
          type: string
    Event:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        user_id:
          type: string
        metadata:
          type: object
        method:
          type: string
        timestamp:
          type: string
          format: date-time
    EventCreate:
      type: object
      required: [type]
      properties:
        type:
          type: string
        user_id:
          type: string
        method:
          type: string
        metadata:
          type: object
    Log:
      type: object
      properties:
        id:
          type: string
        level:
          type: string
        message:
          type: string
        meta:
          type: object
        createdAt:
          type: string
          format: date-time
        type:
          type: string
